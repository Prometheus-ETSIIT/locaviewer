<?xml version="1.0" encoding="utf-8" ?>
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="/home/benito/Programas/RTI/ndds.5.1.0/qos_profiles_5.1.0/resource/schema/rti_dds_profiles.xsd" 
     version="5.1.0">
    
    <!-- Qos Library -->
    <qos_library name="qosLibrary">
        <qos_profile name="DefaultProfile">
            
            <participant_qos>
                
                <transport_builtin>
                    <mask>MASK_NONE</mask>
                </transport_builtin>

                   
                <receiver_pool>
                    <buffer_size>65507</buffer_size>
                </receiver_pool>
                
                <property>
                    <value>

                        <element>
                            <name>dds.transport.load_plugins</name>
                            <value>dds.transport.wan_plugin.wan</value>
                        </element>
                        <element>
                            <name>dds.transport.wan_plugin.wan.library</name>
                            <value>libnddstransportwan.so</value>
                        </element>
                        <element>
                            <name>dds.transport.wan_plugin.wan.create_function</name>
                            <value>NDDS_Transport_WAN_create</value>
                        </element>
                        <element>
                            <name>dds.transport.wan_plugin.wan.server</name>
                            <value>90.170.149.132</value>
                        </element>
                        <element>
                            <name>dds.transport.wan_plugin.wan.server_port</name>
                            <value>5554</value>
                        </element>
                        <element>
                            <name>dds.transport.wan_plugin.wan.transport_instance_id</name>
                            <value>1</value>
                        </element>
                        
                        <!--  Configure UDP transport for higher throughput: -->
                        <element>
                            <name>dds.transport.UDPv4.builtin.parent.message_size_max</name>
                            <value>65507</value>
                        </element>

                        <!--
                          The next setting is to setup the buffers for sending and recieving data 
                          on the transport to be at least double what our expected message size will be.
                          In this case our expected message size is 1MB, so therefore we are setting
                          the buffer sizes to 2MB.
                          -->
                        <element>
                            <name>dds.transport.UDPv4.builtin.send_socket_buffer_size</name>
                            <value>2097152</value>
                        </element>
                        <element>
                            <name>dds.transport.UDPv4.builtin.recv_socket_buffer_size</name>
                            <value>2097152</value>
                        </element>
                        <!--
                            Configure shared memory transport for higher throughput:
                          -->
                        <element>
                            <!-- 
                            Set the shared memory maximum message size to the
                            same value that was set for UDP.
                            -->
                            <name>dds.transport.shmem.builtin.parent.message_size_max</name>
                            <value>65507</value>
                            <!-- 64 KB - header sizes -->
                        </element>
                        <element>
                            <!--
                            Set the size of the shared memory transport's
                            receive buffer to some large value.
                            -->
                            <name>dds.transport.shmem.builtin.receive_buffer_size</name>
                            <value>2097152</value>
                            <!-- 2 MB -->
                        </element>
                        <element>
                            <!--
                             Set the maximum number of messages that the shared
                             memory transport can cache while waiting for them
                             to be read and deserialized.
                             -->
                            <name>dds.transport.shmem.builtin.received_message_count_max</name>
                            <value>2048</value>
                        </element>
                        
                    </value>
                </property>
            </participant_qos>
            
            <!-- QoS used to configure the data writer -->                
            <datawriter_qos>

                <!-- This data may be larger than 64K (the maximum transport 
                     size for UDP) so this allows the middleware to fragment
                     data into chunks to send over the UDP transport -->
                <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                </publish_mode>

            </datawriter_qos>

            <!-- QoS used to configure the data reader created in the example code -->                
            <datareader_qos>

                <!-- Response delays in the DataReader are useful if there is a
                       large fanout of readers to writers - they prevent the 
                       readers from simultaneously resonding to heartbeats and 
                       flooding the writers.  With smaller numbers of readers the
                       delays can be set to zero.  -->
                <protocol>
                    <rtps_reliable_reader>
                        <min_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </min_heartbeat_response_delay>
                        <max_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_heartbeat_response_delay>
                    </rtps_reliable_reader>
                </protocol>

            </datareader_qos>
            
        </qos_profile>
    </qos_library>

    <!-- types. Definido en 3.4 -->
    <types>
         <const name="MAX_BUFFER_SIZE" type="long" value="1048576"/> <!-- 1 MB -->
         <const name="MAX_ID_SIZE"     type="long" value="16" />
         <const name="MAX_STRING_SIZE" type="long" value="32" />
         
         <struct name="VideoData">
             <member name="camId" type="string" key="true" stringMaxLength="MAX_ID_SIZE" />
             <member name="sala"  type="string" stringMaxLength="MAX_STRING_SIZE" />
             <member name="posX"  type="double" />
             <member name="posY"  type="double" />
             <member name="angle" type="double" />
             <member name="codecInfo" type="string" stringMaxLength="MAX_STRING_SIZE" />
             <member name="width"     type="long" />
             <member name="height"    type="long" />
             <member name="buffer"    type="octet" sequenceMaxLength="MAX_BUFFER_SIZE" /> <!-- -1 sin lÃ­mite -->
          </struct>
    </types>

    <!-- Domain Library -->
    <domain_library name="MyDomainLibrary" >
        <domain name="LocaviewerDomain" domain_id="0" />
    </domain_library>

    <!-- Participant library -->
    <participant_library name="MyParticipantLibrary">

        <domain_participant name="PublicationParticipant" domain_ref="MyDomainLibrary::LocaviewerDomain">
            <register_type name="VideoDataType" kind="dynamicData" type_ref="VideoData" />
            <topic name="VideoDataTopic" register_type_ref="VideoDataType">
                <topic_qos name="VideoData_qos" base_name="qosLibrary::DefaultProfile"/>
            </topic>
        </domain_participant>
        
        <domain_participant name="SubscriptionParticipant" domain_ref="MyDomainLibrary::LocaviewerDomain"> 
            <register_type name="VideoDataType" kind="dynamicData" type_ref="VideoData" />
            <topic name="VideoDataTopic" register_type_ref="VideoDataType">
                <topic_qos name="VideoData_qos" base_name="qosLibrary::DefaultProfile"/>
            </topic>  
        </domain_participant>
       
    </participant_library>

</dds>